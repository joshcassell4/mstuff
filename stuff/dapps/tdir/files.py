df = {'runthings.py':'from things import app\napp.env="development"\napp.run(debug=True,host=\'0.0.0.0\')\n',
        "Dockerfile":'# using ubuntu LTS version\nFROM python:slim\n\n# avoid stuck build due to user prompt\n#ARG DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update && apt-get install --no-install-recommends -y curl && \\\n\tapt-get clean && rm -rf /var/lib/apt/lists/*\n\n# create and activate virtual environment\n# using final folder name to avoid path issues with packages\n# RUN python3.9 -m venv /home/myuser/venv\n# ENV PATH="/home/myuser/venv/bin:$PATH"\n\n# install requirements\nCOPY requirements.txt .\n#RUN pip3 install --no-cache-dir wheel\nRUN pip3 install -r requirements.txt\n\n# FROM ubuntu:20.04 AS runner-image\n# RUN apt-get update && apt-get install --no-install-recommends -y python3.9 python3-venv && \\\n# \tapt-get clean && rm -rf /var/lib/apt/lists/*\n\n# RUN useradd --create-home myuser\n# COPY --from=builder-image /home/myuser/venv /home/myuser/venv\n\n# USER myuser\n# RUN mkdir /home/myuser/code\nWORKDIR /\nCOPY ./runthings.py .\n#COPY ./my_app ./my_app\n\nEXPOSE 5000\n\n# make sure all messages always reach console\nENV PYTHONUNBUFFERED=1\n\n# activate virtual environment\n# ENV VIRTUAL_ENV=/home/myuser/venv\n# ENV PATH="/home/myuser/venv/bin:$PATH"\n\n# /dev/shm is mapped to shared memory and should be used for gunicorn heartbeat\n# this will improve performance and avoid random freezes\n# CMD ["gunicorn","-b", "0.0.0.0:5000", "-w", "4", "-k", "gevent", "--worker-tmp-dir", "/dev/shm", "app:app"]\nCMD ["python", "runthings.py"]',
        "requirements.txt":'# using ubuntu LTS version\nFROM python:slim\n\n# avoid stuck build due to user prompt\n#ARG DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update && apt-get install --no-install-recommends -y curl && \\\n\tapt-get clean && rm -rf /var/lib/apt/lists/*\n\n# create and activate virtual environment\n# using final folder name to avoid path issues with packages\n# RUN python3.9 -m venv /home/myuser/venv\n# ENV PATH="/home/myuser/venv/bin:$PATH"\n\n# install requirements\nCOPY requirements.txt .\n#RUN pip3 install --no-cache-dir wheel\nRUN pip3 install -r requirements.txt\n\n# FROM ubuntu:20.04 AS runner-image\n# RUN apt-get update && apt-get install --no-install-recommends -y python3.9 python3-venv && \\\n# \tapt-get clean && rm -rf /var/lib/apt/lists/*\n\n# RUN useradd --create-home myuser\n# COPY --from=builder-image /home/myuser/venv /home/myuser/venv\n\n# USER myuser\n# RUN mkdir /home/myuser/code\nWORKDIR /\nCOPY ./runthings.py .\n#COPY ./my_app ./my_app\n\nEXPOSE 5000\n\n# make sure all messages always reach console\nENV PYTHONUNBUFFERED=1\n\n# activate virtual environment\n# ENV VIRTUAL_ENV=/home/myuser/venv\n# ENV PATH="/home/myuser/venv/bin:$PATH"\n\n# /dev/shm is mapped to shared memory and should be used for gunicorn heartbeat\n# this will improve performance and avoid random freezes\n# CMD ["gunicorn","-b", "0.0.0.0:5000", "-w", "4", "-k", "gevent", "--worker-tmp-dir", "/dev/shm", "app:app"]\nCMD ["python", "runthings.py"]',
        "things/things/views.py":'from werkzeug.exceptions import abort\nfrom flask import render_template\nfrom flask import Blueprint\n\n#from my_app.product.models import THINGS\nfrom things.things.models import THINGS\n\nthings_blueprint = Blueprint(\'things\', __name__)\n@things_blueprint.route(\'/\')\n@things_blueprint.route(\'/home\')\ndef home():\n    #return render_template(\'home.html\', things=THINGS)\n    return render_template(\'home.html\', things=THINGS[0]["data"])\n\n@things_blueprint.route("/")\n@things_blueprint.route(\'/things/<key>\')\ndef thing(key):\n    thing = THINGS.get(key)\n    if not thing:\n        abort(404)\n    return render_template(\'thing.html\', thing=thing)\n\n@things_blueprint.context_processor\ndef some_processor():\n    def name_uuid(thing):\n        return \'{0} / {1}\'.format(thing.name, thing.uuid)\n    return {\'full_name\': \'full_name\'}\n\n\n\n',
        "things/things/models.py":'#from things import Thing\nfrom things.thing import Thing\n\n# PRODUCTS = {\n#     \'iphone\': {\n#         \'name\': \'iPhone 5S\',\n#         \'category\': \'Phones\',\n#         \'price\': 699,\n#     },\n#     \'galaxy\': {\n#         \'name\': \'Samsung Galaxy 5\',\n#         \'category\': \'Phones\',\n#         \'price\': 649,\n#     },\n#     \'ipad-air\': {\n#         \'name\': \'iPad Air\',\n#         \'category\': \'Tablets\',\n#         \'price\': 649,\n#     },\n#     \'ipad-mini\': {\n#         \'name\': \'iPad Mini\',\n#         \'category\': \'Tablets\',\n#         \'price\': 549\n#     }\n# }\n\nts = [Thing(x,name="thing" + str(x)) for x in range(100)]\n\nTHINGS = ts',
        "things/things/__init__.py":"# nothing",
        "things/__init__.py":"from flask import Flask\nfrom things.things.views import things_blueprint\nfrom things.cugh.views import cugh_blueprint\nfrom things.cm.views import cm_blueprint\napp = Flask(__name__)\napp.register_blueprint(things_blueprint)\napp.register_blueprint(cugh_blueprint,url_prefix='/cugh')\napp.register_blueprint(cm_blueprint,url_prefix='/cm')",     
}